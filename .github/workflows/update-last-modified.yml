name: Update Last Modified Date

permissions:
  contents: write

on:
  push:
    paths:
      - '**.sh'  # Runs only when .sh files are modified

jobs:
  update-last-modified:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Current Date
        id: date
        run: echo "DATE=$(date +'%d.%m.%Y')" >> $GITHUB_ENV

      - name: Find Modified Shell Scripts
        id: find_files
        run: |
          FILES=$(git diff --name-only HEAD~1 HEAD -- '*.sh' 2>/dev/null || true)
          if [ -z "$FILES" ]; then
            FILES=$(git ls-files '*.sh')
          fi
          echo "FILES<<EOF" >> $GITHUB_ENV
          echo "$FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update Last Modified Date and OpenCLI Version
        run: |
          if [ -z "$FILES" ]; then
            echo "No .sh files modified, skipping update."
            exit 0
          fi

          # Get the formatted date: 3 digits of year, 4th digit of year + month, and 0 + day
          YEAR=$(date +'%Y')           # Full year (e.g., 2025)
          YEAR_SHORT=${YEAR:0:3}       # First 3 digits of year (e.g., 202)
          YEAR_4TH=${YEAR:3:1}         # 4th digit of the year (e.g., 5)
          MONTH=$(date +'%m')          # Month with leading zero (e.g., 02)
          DAY=$(date +'%d')            # Day with leading zero (e.g., 03)

          # Format version as: 202.502.003
          VERSION="${YEAR_SHORT}.${YEAR_4TH}${MONTH}.0${DAY}"

          while IFS= read -r file; do
            echo "Updating: $file"
            sed -i "s/^# Last Modified: .*/# Last Modified: ${VERSION}/" "$file"
          done <<< "$FILES"

          # Update OPENCLI_VERSION in the opencli file
          if [ -f opencli ]; then
            echo "Updating OpenCLI Version to $VERSION"
            sed -i "s/^OPENCLI_VERSION=\"[0-9.]\+\"/OPENCLI_VERSION=\"${VERSION}\"/" opencli
          fi

      - name: Commit and Push Changes
        env:
          PAT: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}.git

          # Check for unstaged changes
          if ! git diff-index --quiet HEAD --; then
            echo "Unstaged changes detected. Stashing changes."
            git stash
          fi

          # Pull the latest changes
          git pull --rebase origin main

          # Apply stashed changes (if any)
          if git stash list | grep -q 'stash@{0}'; then
            echo "Reapplying stashed changes."
            git stash pop || echo "Conflict detected when applying stashed changes. Please resolve manually."
          fi

          git add .
          git commit -m "autoupdate date after edit" || exit 0
          git push origin HEAD:main
